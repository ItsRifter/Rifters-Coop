
@BaseClass = BaseProperties_rifter_rifters_coop
[
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	parentAttachmentName(parentAttachment) [ group="Hierarchy" ] : "Parent Model Bone/Attachment Name" : : "The name of the bone or attachment to attach to on the entity's parent in the movement hierarchy. Use !bonemerge to use bone-merge style attachment."

	useLocalOffset(boolean) [ group="Hierarchy" ] : "Use Model Attachment offsets" : 0 : "Whether to respect the specified local offset when doing the initial hierarchical attachment to its parent."
	local.origin(vector) [ group="Hierarchy" ] : "Model Attachment position offset" : : "Offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.angles(angle) [ group="Hierarchy" ] : "Model Attachment angular offset" : : "Angular offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.scales(vector) [ group="Hierarchy" ] : "Model Attachment scale" : : "Scale in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."

	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	tags(tags) : "Tags" : "" : "A list of general purpose tags for this entity, for interactions with other entities such as triggers."
]

//
// BreakableWall
//
@PointClass base(BaseProperties_rifter_rifters_coop) tags( SupportsSolids ) model() = rc_breakable : "Similar to func_breakable, a mesh with health that can break"
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	healthbreak(float) : "Health Until Break" : 1 : "Health until break, -1 makes it unbreakable to users"
	mindamage(float) : "Min Damage" : 0 : "Minimal required to damage this mesh"
	damagedsound(sound) : "Damage Sound" :  : "Sound to play upon damage"
	destroyedsound(sound) : "Destroyed Sound" :  : "Sound to play upon desctruction"
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : ""
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnBroken(void) : ""
]

//
// NPCSpawnpoint
//
@PointClass base(BaseProperties_rifter_rifters_coop) model() 
metadata
{
	entity_tool_name = "NPC Spawnpoint"
	entity_tool_group = "Rifters Co-Op"
	entity_tool_tip = "Defines an NPC's spawnpoint with any uniqueness"
}
= rc_npc_spawnpoint : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	isfriendly(boolean) : "Is Friendly NPC" : 0 : "Is this a friendly npc (will be friendly to other teams that aren't hostile)"
	spawnonmap(boolean) : "Spawn Immediately" : 1 : "Should this spawn immediately on map load"
	npcteam(choices) : "NPC To Spawn" : 0 : "Spawns the specific NPC" =
	[
		0 : "Unspecified"
		1 : "Zombie"
	]
	uniquesoundalert(string) : "Unique Alert" :  : "Play a unique Alert Sound (LEAVE BLANK TO USE DEFAULT)"
	uniquesoundidle(string) : "Unique Idle" :  : "Play a unique Idle Sound (LEAVE BLANK TO USE DEFAULT)"
	uniquesoundpain(string) : "Unique Pain" :  : "Play a unique Pain Sound (LEAVE BLANK TO USE DEFAULT)"
	uniquesounddeath(string) : "Unique Death" :  : "Play a unique Death Sound (LEAVE BLANK TO USE DEFAULT)"
	uniquehealth(integer) : "Unique Health" : 0 : "Sets the health (LEAVE AS 0 TO USE DEFAULT)"
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input AssignNPC(string) : ""
	input KillNPC(void) : ""
	input SpawnNPC(void) : ""
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnSpawn(void) : ""
	output OnDeath(void) : ""
]

//
// PlayerSetup
//
@PointClass base(BaseProperties_rifter_rifters_coop) iconsprite( "materials/editor/weapon_spawnpoint.vmat" ) 
metadata
{
	entity_tool_name = "Player Setup"
	entity_tool_group = "Rifters Co-Op"
	entity_tool_tip = "Sets up the player for the map"
}
= rc_player_setup : ""
[
	enableflashlight(boolean) : "Enable Flashlight" : 1 : "Is flashlight enabled or disabled on spawn"
	givecrowbar(boolean) : "Should Give Crowbar" : 0 : "Give the Crowbar on player spawn"
	giveglock(boolean) : "Should Give Glock" : 0 : "Give the Glock on player spawn"
	giverevolver(boolean) : "Should Give Revolver" : 0 : "Give the Revolver on player spawn"
]

//
// Soundscape
//
@SolidClass base(BaseProperties_rifter_rifters_coop) tags( Trigger, Trigger ) 
metadata
{
	entity_tool_name = "Soundscape"
	entity_tool_group = "Rifters Co-Op"
	entity_tool_tip = "Loops a sound in an area until the next soundscape is triggered"
	auto_apply_material = "materials/tools/toolstrigger.vmat"
}
= rc_soundscape : ""
[
	sound_path(sound) : "Sound Path" :  : "The looping sound to play upon trigger, Leaving it empty clears soundscapes from being heard"
	startdisabled(boolean) : "Start Disabled" : 0 : "Should this entity start disabled?"
	actvationtags(tags) : "Actvation Tags" :  : "Entities with these tags can activate this trigger."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
	spawnflags(flags) = [
		1 : "Clients" : 1
		2 : "Npcs" : 0
		4 : "Pushables" : 0
		8 : "Physics Objects" : 0
		16 : "Allied Npcs" : 0
		32 : "Client In Vehicle" : 0
		64 : "Everything" : 0
		512 : "Client Not In Vehicle" : 0
		1024 : "Physics Debris" : 0
	]

	input Enable(void) : "Enables this trigger"
	input Disable(void) : "Disables this trigger"
	input Toggle(void) : "Toggles this trigger between enabled and disabled states"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnStartTouch(void) : "Fired when an entity starts touching this trigger. The touching entity must pass this trigger's filters to cause this output to fire."
	output OnEndTouch(void) : "Fired when an entity stops touching this trigger. Only entities that passed this trigger's filters will cause this output to fire."
	output OnStartTouchAll(void) : "Fired when an entity starts touching this trigger while no other passing entities are touching it."
	output OnEndTouchAll(void) : "Fired when all entities touching this trigger have stopped touching it."
]

//
// TextPopup
//
@PointClass base(BaseProperties_rifter_rifters_coop) iconsprite( "materials/editor/display_text.vmat" ) 
metadata
{
	entity_tool_name = "Text Popup"
	entity_tool_group = "Rifters Co-Op"
	entity_tool_tip = "Similar to game_text, displays a text to players HUD"
}
= rc_displaytext : ""
[
	displaytext(string) : "Text To Display" : "" : "Message to display to user"
	displaytoall(boolean) : "Display All" : 0 : "Display to all users (will use activator of a trigger if disabled)"
	timeduration(float) : "Time Duration" :  : "How long does this text last before fade"
	textxpos(integer) : "Screen X Pos" : 50 : "Where this will display in X screen position"
	textypos(integer) : "Screen Y Pos" : 50 : "Where this will display in Y screen position"

	input DisplayText(void) : ""
]

//
// TPDest
//
@PointClass base(BaseProperties_rifter_rifters_coop) editormodel( "models/editor/playerstart.vmdl" ) 
metadata
{
	entity_tool_name = "Teleport Destination"
	entity_tool_group = "Rifters Co-Op"
	entity_tool_tip = "Exactly like teleport_destination, does nothing else"
}
= rc_tpdest : ""
[
]

//
// WeaponOverride
//
@PointClass base(BaseProperties_rifter_rifters_coop) iconsprite( "materials/editor/weapon_spawnpoint.vmat" ) 
metadata
{
	entity_tool_name = "Weapon Override"
	entity_tool_group = "Rifters Co-Op"
	entity_tool_tip = "Overrides the weapon for custom maps"
}
= rc_weapon_override : ""
[
	uniqueworldmodelpathpistol(string) : "Unique World Model Pistol" :  : "Uses a unique pistol world model path"
	uniqueviewmodelpathpistol(string) : "Unique View Model Pistol" :  : "Uses a unique pistol view model path (LEAVE BLANK TO USE DEFAULT)"
	uniquesoundfire(string) : "Unique Fire Pistol" :  : "Play a unique fire Sound (LEAVE BLANK TO USE DEFAULT)"
]

//
// WeaponSpawnpoint
//
@PointClass base(BaseProperties_rifter_rifters_coop) iconsprite( "materials/editor/weapon_spawnpoint.vmat" ) 
metadata
{
	entity_tool_name = "Weapon Spawnpoint"
	entity_tool_group = "Rifters Co-Op"
	entity_tool_tip = "Defines an weapons spawnpoint"
}
= rc_weapon_point : ""
[
	weapontype(choices) : "Weapon To Spawn" : 0 : "What type of weapon is this" =
	[
		0 : "Unspecified"
		1 : "Crowbar"
		2 : "Glock"
		3 : "Colt Magnum"
	]
	spawnonmap(boolean) : "Spawn Immediately" : 1 : "Should this spawn immediately on map load"

	input SpawnWeapon(void) : ""

	output OnSpawn(void) : ""
]

